import getForeignKey from '../helpers/get_foreign_key';
import {OrderProducts, OrderProductsStore} from '../../../src/models/order_products';

const store = new OrderProductsStore();


describe("Order_Products Model", () => {
    it('should have an index method', () => {
        expect(store.index).toBeDefined();
    });

    it('should have a show method', () => {
        expect(store.show).toBeDefined();
    });

    it('should have a create method', () => {
        expect(store.create).toBeDefined();
    });

    it('should have a update method', () => {
        expect(store.update).toBeDefined();
    });

    it('should have a delete method', () => {
        expect(store.delete).toBeDefined();
    });

    it('should add an order_products entry when the create method is invoked', async () => {
        const orderId = await getForeignKey('order');
        const productId = await getForeignKey('product');
        const result = await store.create({
            id: '',
            order_id: orderId, 
            product_id: productId,
            quantity: 2
        });
        expect(result).toEqual({
            id: result.id,
            order_id: orderId, 
            product_id: productId,
            quantity: 2
        });
    });

    it('should return a list of order_Products when the index method is invoked', async () => {
        const orderId = await getForeignKey('order');
        const productId = await getForeignKey('product');
        await store.create({
            id: '',
            order_id: orderId, 
            product_id: productId,
            quantity: 1
        });
        const result = await store.index();
        expect(result).not.toBe([]);
    });

    it('should return the correct order_products when the show method is invoked', async () => {
        const orderId = await getForeignKey('order');
        const productId = await getForeignKey('product');
        const result = await store.create({
            id: '',
            order_id: orderId, 
            product_id: productId,
            quantity: 3
        });
        const test_data = await store.show(result.id);
        expect(test_data).toEqual({
            id: result.id,
            order_id: orderId, 
            product_id: productId,
            quantity: 3
        });
    });

    it('should update the order_id, product_id and quantity when the update method is invoked', async () => {
        const orderId1 = await getForeignKey('order');
        const productId1 = await getForeignKey('product');
        const newOrdProds = await store.create({
            id: '',
            order_id: orderId1, 
            product_id: productId1,
            quantity: 4
        });
        const orderId2 = await getForeignKey('order');
        const productId2 = await getForeignKey('product');
        newOrdProds.order_id = orderId2;
        newOrdProds.product_id = productId2;
        newOrdProds.quantity = 10;
        const result = await store.update(newOrdProds);
        expect(result).toEqual({
            id: result.id,
            order_id: orderId2, 
            product_id: productId2,
            quantity: 10
        });
    });

    it('should update selective properties when the update method is invoked with not all properties present', async () => {
        const orderId = await getForeignKey('order');
        const productId = await getForeignKey('product');
        const newOrdProds = await store.create({
            id: '',
            order_id: orderId, 
            product_id: productId,
            quantity: 4
        });
        newOrdProds.quantity = 10;
        const result = await store.update(newOrdProds);
        expect(result).toEqual({
            id: result.id,
            order_id: orderId, 
            product_id: productId,
            quantity: 10
        });
    });

    it('should remove the product when the delete method is invoked', async () => {
        const orderId = await getForeignKey('order');
        const productId = await getForeignKey('product');
        const newOrdProds = await store.create({
            id: '',
            order_id: orderId, 
            product_id: productId,
            quantity: 1
        });
        const id = newOrdProds.id;
        const deletedOrdProds = await store.delete(id);
        expect(deletedOrdProds).toEqual({
            id: id,
            order_id: orderId, 
            product_id: productId,
            quantity: 1
        }); 
        const result = await store.show(id);
        expect(result).toBeUndefined();
    });
});